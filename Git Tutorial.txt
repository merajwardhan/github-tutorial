Git can show version information, like if you save a code on git. it saves various versions of that code. so in future you can revisit 
the prior code if you want to undo change or revive something.

------------------------------------------------------------------------------------------------------------------------------------------

GIT USING POWERSHELL/COMMAND PROMPT (Command prompt instructions)

Step 0 = IMP (if you ever close the  command line/powershell then you will have to reset the directory because it will be set to home 
         directory again by default
Step 1 = Open powershell and the command prompt directory will be set to home directory. so we have to change directory
Step 2 = " cd C:\Users\patil\Desktop\Git_Tut" we gave the path of the directory that we want our Git application to check folder.
         here, cd (change directory)
Step 3 = (optional) "ls" give ls command , which is list files and folders in the *current folder
Step 4 = Set up git in the folder that we have set our change directory. to do that pass "Git init" in the command line
         (after this command, Git is now tracking all the files in this folder for changes.

------------------------------------------------------------------------------------------------------------------------------------------

GIT COMMANDS IN COMMAND LINE

1 . git status(case sensitive) this will show all the changes since the last version

2 . if any untrack files. you can use (git add name_of_file) or you can use (git add .) if you use dot then git will add all the 
    current folder files to the next version. this "git add" method doesn't create a new version it just picks which changes we want in  
    the next version. like, if you select file1 and added it. and if you also has a file2. and you created a new version and made changes
    to both file1 & file2 then git will save the changes in file1 in the new version because you only added file1 

3 . To create a new version, we have to use "git commit -m" (version = commit in Git) here "-m" means attaching a message , to better 
    understand what changes we made in this version, also write the message in double quotes after "-m" 
    example - git commit -m "changes in file4 of Subfolder2"
    after the commit if you ever get this error down below.

    {Author identity unknown

     *** Please tell me who you are.

     Run

     git config --global user.email "you@example.com"
     git config --global user.name "Your Name"

     to set your account's default identity.
     Omit --global to set the identity only in this repository.}
3.1 . Then pass command "git config --global user.email "you@example.com"" with your email id in it
3.2 . Then you can pass "git config --local user.name "Your Name"" here, local means 'Git config setting for a specific repository'
3.3 . or You can pass   "git config --global user.name "Your Name"" here, global means 'Global Git config controls settings for the 
      currently logged in user and all his repositories' . you can config either local or global user as per your convinence.

Now to check if configuration setting are done, pass "git config --list" and you can check your email & username

4 . in the output you might see "4 files changed, 19 insertions(+)" this means 4 files were changes and 19 Lines of code we're added.
TIP - with version message it's common practice to attach your name and email, to pinpoint who made the changes 

5 . (git log) to check version history use this command , this will show authors username and email plus the comment message that we
    that we set with while changing the version. 

6 . (git commit -m "Version 1" --amend") if you ever forget to add changes and dont want a newer version to add those changes. then we
   will use this function, and add "--amend" which will save the changes to the previous commit also can change name of commit is you 
   want.

7 . (git reset file_Name OR git reset .) dot for the entire folder. If you want to take a file out of the staging area and to the 
   working (changes) area, then you can use this function.

----------------------------------------------------------------------------------------------------------------------------------------

VISUALIZING GIT AND GIT FUNDAMENTALS

(here we will visualize the changes that git is tracking)
For this, Bro used VSCode which had integrated git interface. Just on the left below the search icon , there is a tree branckes like icon 
with 3 dots . that is the git interface, there you can see all the changes made to the code. for different files.
VS Code also offers some git functions, like if you want to add a new code that you've written. there's a + icon on that. that perform
the same action that we do manually to add a file to git by using "git add filename" in command prompt, with this button we don't need
to go to the command prompt.
If you want to perform "git add ." method to add all changes in different files, then in changes option we can directly click the + icon
on the title of changes drop menu and press the + button to implement the same method(git add .)

When you click the + icon on the changes drop menu this file are shifted to "Staged changes" drop menu where they are added to the next
version after you finish

Staging area = (changes will be saved in the next version).

If you add a file in the "stage changes" area and again change the code in that file then the file is shown in "changes" section as well
as in "stages changes" section because, git tracks changes. these are not to files but you changes the file and added it to git but
changed it again, so it is showing as new changes have arrived. if you add this file from "changes" section then as it moves to the 
"stages changes" section it again shows as 1 file. 

In VS code if you want to take a file out of the "Stage changes" section i.e if you don't want this changes to go in the next version 
there's a - minus button which will return this file to "changes" section 

There also a commit button, which has various options.
1.commit = will commit the next version (create)
2.commit(amend) = will commit the changes to the same/current version
3.commit & push = 
4.commit & sync =